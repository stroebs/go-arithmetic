// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/arithmetic.proto

package arithmetic

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Input struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad86296e2cb83068, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Input) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type InputMultiple struct {
	X                    []float64 `protobuf:"fixed64,1,rep,packed,name=x,proto3" json:"x,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InputMultiple) Reset()         { *m = InputMultiple{} }
func (m *InputMultiple) String() string { return proto.CompactTextString(m) }
func (*InputMultiple) ProtoMessage()    {}
func (*InputMultiple) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad86296e2cb83068, []int{1}
}

func (m *InputMultiple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputMultiple.Unmarshal(m, b)
}
func (m *InputMultiple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputMultiple.Marshal(b, m, deterministic)
}
func (m *InputMultiple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputMultiple.Merge(m, src)
}
func (m *InputMultiple) XXX_Size() int {
	return xxx_messageInfo_InputMultiple.Size(m)
}
func (m *InputMultiple) XXX_DiscardUnknown() {
	xxx_messageInfo_InputMultiple.DiscardUnknown(m)
}

var xxx_messageInfo_InputMultiple proto.InternalMessageInfo

func (m *InputMultiple) GetX() []float64 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *InputMultiple) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Result struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad86296e2cb83068, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Result) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Error struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad86296e2cb83068, []int{3}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Input)(nil), "arithmetic.Input")
	proto.RegisterType((*InputMultiple)(nil), "arithmetic.InputMultiple")
	proto.RegisterType((*Result)(nil), "arithmetic.Result")
	proto.RegisterType((*Error)(nil), "arithmetic.Error")
}

func init() { proto.RegisterFile("proto/arithmetic.proto", fileDescriptor_ad86296e2cb83068) }

var fileDescriptor_ad86296e2cb83068 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0xc5, 0x45, 0x04, 0xed, 0xab, 0x1a, 0x9d, 0x43, 0x83, 0x9e, 0x0c, 0x1e, 0xf4, 0x84, 0xb1,
	0x8d, 0x57, 0x13, 0xe2, 0x9f, 0xa4, 0x07, 0x2f, 0xf8, 0x09, 0x28, 0xbb, 0x51, 0x12, 0x2a, 0x64,
	0x59, 0x4c, 0xf9, 0xc2, 0x7e, 0x0e, 0xd3, 0x59, 0xb6, 0xd6, 0x18, 0x13, 0xac, 0xb7, 0x79, 0x33,
	0xef, 0xbd, 0x1f, 0x10, 0x30, 0xaa, 0x54, 0xa9, 0xcb, 0xab, 0x54, 0xe5, 0xfa, 0x75, 0x2e, 0x75,
	0x9e, 0x45, 0xbc, 0x20, 0x7c, 0x6d, 0xc2, 0x73, 0x78, 0xd3, 0xb7, 0xaa, 0xd1, 0xb4, 0x0f, 0x67,
	0x11, 0x38, 0x67, 0xce, 0xa5, 0x93, 0x38, 0x8b, 0xa5, 0x6a, 0x83, 0x6d, 0xa3, 0xda, 0xf0, 0x11,
	0x07, 0x6c, 0x7a, 0x6a, 0x0a, 0x9d, 0x57, 0x85, 0xb4, 0x66, 0xd7, 0x98, 0x2f, 0xe0, 0x49, 0xa5,
	0x4a, 0xc5, 0x81, 0xe1, 0xf8, 0x38, 0x5a, 0x23, 0x3e, 0x2c, 0x0f, 0x89, 0xb9, 0x87, 0x53, 0xf8,
	0x89, 0xac, 0x9b, 0x42, 0xd3, 0x08, 0xbe, 0xe2, 0xa9, 0x43, 0x76, 0xaa, 0x7f, 0xd5, 0x0d, 0x3c,
	0xd6, 0x44, 0xd8, 0xc9, 0x4a, 0x21, 0xb9, 0x67, 0x90, 0xf0, 0x4c, 0x01, 0x76, 0xe7, 0xb2, 0xae,
	0xd3, 0x17, 0xc9, 0x3d, 0x83, 0xc4, 0xca, 0xf1, 0x87, 0x0b, 0xc4, 0xab, 0x4a, 0x8a, 0xe0, 0xc6,
	0x42, 0xd0, 0x37, 0x0c, 0xbf, 0xe9, 0x29, 0xad, 0xaf, 0xcc, 0x43, 0x87, 0x5b, 0x74, 0x8b, 0x61,
	0x2c, 0xc4, 0xea, 0x33, 0x9c, 0xfc, 0xc8, 0xd9, 0xd3, 0x2f, 0xf9, 0x09, 0xf6, 0x9e, 0x9b, 0x99,
	0x56, 0x69, 0xa6, 0xfb, 0x43, 0xef, 0x70, 0x64, 0x43, 0xff, 0x22, 0x77, 0x8e, 0xf6, 0x4f, 0x64,
	0x1b, 0xda, 0x9c, 0x7c, 0x0d, 0xff, 0x3e, 0x7f, 0xcf, 0x85, 0xec, 0xcf, 0x8d, 0x71, 0x68, 0x22,
	0x1b, 0x53, 0x67, 0x3e, 0xff, 0xea, 0x93, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xbc, 0x59,
	0x5a, 0x04, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArithmeticClient is the client API for Arithmetic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithmeticClient interface {
	Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error)
	AddMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error)
	Subtract(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error)
	SubtractMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error)
	Multiply(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error)
	MultiplyMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error)
	Divide(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error)
	DivideMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error)
}

type arithmeticClient struct {
	cc *grpc.ClientConn
}

func NewArithmeticClient(cc *grpc.ClientConn) ArithmeticClient {
	return &arithmeticClient{cc}
}

func (c *arithmeticClient) Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) AddMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/AddMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) Subtract(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/Subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) SubtractMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/SubtractMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) Multiply(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) MultiplyMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/MultiplyMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) Divide(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticClient) DivideMultiple(ctx context.Context, in *InputMultiple, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/DivideMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServer is the server API for Arithmetic service.
type ArithmeticServer interface {
	Add(context.Context, *Input) (*Result, error)
	AddMultiple(context.Context, *InputMultiple) (*Result, error)
	Subtract(context.Context, *Input) (*Result, error)
	SubtractMultiple(context.Context, *InputMultiple) (*Result, error)
	Multiply(context.Context, *Input) (*Result, error)
	MultiplyMultiple(context.Context, *InputMultiple) (*Result, error)
	Divide(context.Context, *Input) (*Result, error)
	DivideMultiple(context.Context, *InputMultiple) (*Result, error)
}

// UnimplementedArithmeticServer can be embedded to have forward compatible implementations.
type UnimplementedArithmeticServer struct {
}

func (*UnimplementedArithmeticServer) Add(ctx context.Context, req *Input) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedArithmeticServer) AddMultiple(ctx context.Context, req *InputMultiple) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiple not implemented")
}
func (*UnimplementedArithmeticServer) Subtract(ctx context.Context, req *Input) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (*UnimplementedArithmeticServer) SubtractMultiple(ctx context.Context, req *InputMultiple) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubtractMultiple not implemented")
}
func (*UnimplementedArithmeticServer) Multiply(ctx context.Context, req *Input) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedArithmeticServer) MultiplyMultiple(ctx context.Context, req *InputMultiple) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiplyMultiple not implemented")
}
func (*UnimplementedArithmeticServer) Divide(ctx context.Context, req *Input) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (*UnimplementedArithmeticServer) DivideMultiple(ctx context.Context, req *InputMultiple) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivideMultiple not implemented")
}

func RegisterArithmeticServer(s *grpc.Server, srv ArithmeticServer) {
	s.RegisterService(&_Arithmetic_serviceDesc, srv)
}

func _Arithmetic_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Add(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_AddMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).AddMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/AddMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).AddMultiple(ctx, req.(*InputMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Subtract(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_SubtractMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).SubtractMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/SubtractMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).SubtractMultiple(ctx, req.(*InputMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Multiply(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_MultiplyMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).MultiplyMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/MultiplyMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).MultiplyMultiple(ctx, req.(*InputMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Divide(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arithmetic_DivideMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).DivideMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/DivideMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).DivideMultiple(ctx, req.(*InputMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arithmetic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arithmetic.Arithmetic",
	HandlerType: (*ArithmeticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Arithmetic_Add_Handler,
		},
		{
			MethodName: "AddMultiple",
			Handler:    _Arithmetic_AddMultiple_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _Arithmetic_Subtract_Handler,
		},
		{
			MethodName: "SubtractMultiple",
			Handler:    _Arithmetic_SubtractMultiple_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _Arithmetic_Multiply_Handler,
		},
		{
			MethodName: "MultiplyMultiple",
			Handler:    _Arithmetic_MultiplyMultiple_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Arithmetic_Divide_Handler,
		},
		{
			MethodName: "DivideMultiple",
			Handler:    _Arithmetic_DivideMultiple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/arithmetic.proto",
}
